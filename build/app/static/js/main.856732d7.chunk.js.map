{"version":3,"sources":["Loader.js","ResourceList.js","App.js","serviceWorker.js","index.js"],"names":["Loader","style","position","backgroundColor","width","height","zIndex","display","alignItems","justifyContent","flexDirection","icon","faCircleNotch","color","className","size","ResourceList","props","useState","inProgress","setInProgress","Resource","resourceClass","index","toString","useEffect","console","log","fontFamily","startCase","data","title","flexWrap","paddingTop","link","href","topics","map","item","key","resources","length","listStyleType","resource","id","App","setResources","fetch","method","then","response","status","json","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.856732d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCircleNotch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction Loader() {\r\n    let loaderStyle = { position: 'absolute', \r\n                        backgroundColor: 'rgb(255, 255, 255, 0.5)', \r\n                        width: '100%', \r\n                        height: '100%', \r\n                        zIndex: 1,\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        flexDirection: 'column'\r\n                     };\r\n    return (\r\n        <div style={ loaderStyle }>\r\n            <FontAwesomeIcon icon={ faCircleNotch } style={ { color: 'DodgerBlue' } } className=\"default fa-spin\" size=\"2x\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { useEffect, useState } from 'react';\r\nimport Loader from './Loader';\r\nimport { startCase } from 'lodash';\r\n\r\nfunction ResourceList(props) {\r\n    \r\n    let [inProgress, setInProgress] = useState(true);\r\n\r\n    /* Total 10 gradients will be used */\r\n\r\n    useEffect(() => {\r\n        if(props.resources && props.resources.length > 0) {\r\n            setInProgress(false);\r\n        }\r\n        else {\r\n            setInProgress(true);\r\n        }\r\n    }, [props.resources, inProgress]);\r\n\r\n    function Resource(props) {\r\n        let gradient = props.index < 10 ? ( \"g\" + (props.index + 1).toString() ) : ( \"g\" + ((props.index % 10) + 1).toString() );\r\n        let resourceClass = \"resource-container \" + gradient;\r\n        useEffect(() => {\r\n            console.log(resourceClass);\r\n        });\r\n        return (\r\n            <li className={ resourceClass }>\r\n                <div className=\"row d-flex align-items-center\">\r\n                <div className=\"col-md-12\">\r\n                <h2 style={ { color: 'Cornsilk', fontFamily: 'Roboto' }} className=\"resource-title\">\r\n                {startCase(props.data.title)}\r\n                </h2>\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"row d-flex align-items-center pb-2\">\r\n                <div className=\"col-md-1\">\r\n                <strong style={ { color: 'AliceBlue', fontFamily: 'Roboto' }}>Link:</strong>\r\n                </div>\r\n                <div style={ { display: 'flex', flexWrap: 'wrap', paddingTop: '1px', color: 'Beige', fontFamily: 'Roboto' } } className=\"col-md-10\">\r\n                <div>\r\n                {props.data.link}\r\n                </div>\r\n                \r\n                <div>\r\n                <a className=\"resource-url\" href={ \"http://\" + props.data.link }>Visit</a>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                \r\n                <div className=\"row d-flex align-items-center\">\r\n                <div className=\"col-md-1\">\r\n                <strong style={ { color: 'AliceBlue', fontFamily: 'Roboto' }}>Topics: </strong>\r\n                </div>\r\n                <div className=\"col-md-10\">\r\n                <div className = \"topic-container\">\r\n                { props.data.topics ? props.data.topics.map((item, index) => \r\n                    <div style={ { fontFamily: 'Roboto' } } className=\"topic\" key={index}>{startCase(item)}</div>\r\n                ) : '' }\r\n                </div>\r\n                </div>\r\n                </div>\r\n\r\n            </li> \r\n        );\r\n    }\r\n\r\n    return (\r\n        <div style = { { position: 'relative', height: '100%'} }>\r\n        { inProgress ? <Loader /> : '' }\r\n        <ul style={ { width: '100%', listStyleType: 'none' } } className=\"resourcelist\">\r\n        { props.resources.map((resource, index) => (<Resource key = { resource.id } data = { resource } index = { index } />)) }\r\n        </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResourceList;","import React, { useState, useEffect } from 'react';\nimport ResourceList from './ResourceList';\nimport './App.css';\n\nfunction App() {\n\n  let [resources, setResources] = useState([]);\n\n  function getResources() {\n    fetch('/api/resources',\n        { method: 'GET' }\n    ).then((response) => {\n        if(response.status === 200) \n            return response.json();\n    }).then((response) => {\n        setResources(response);\n    });\n  }\n\n  useEffect(() => {\n    getResources();\n  }, []);\n\n  return (\n    <div style={ { height: '100%' }}>\n      <h1 style={ { textAlign: 'center', color: 'AliceBlue', fontFamily: 'Roboto', paddingTop: '10px' }}>Open Educational Resources</h1>\n      <ResourceList resources = { resources } />\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}